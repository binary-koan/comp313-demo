Started with Roll a Ball tutorial

Decision: Used CharacterController for the player - considered RigidBody but
wanted good directional movement support and ability to walk up steps etc

Decision: Tried using CharacterController for the NPC as well but the movement
script became quite complex; it made more sense in the end to use NavMeshAgent,
which has built in path following

Inconsistencies between components became a problem - for example the fact that
a CharacterController collides using OnControllerColliderHit, not OnCollisionEnter.

Decision: The easiest way to get models displaying on my existing player and NPC
objects seemed to be making the model a child of the object. I considered just
putting the model into the scene and setting up components in the same way, but
that turned out to be a lot of effort and would have tied the objects to those
specific models. Having the models as children enabled me to try out both
designers' assets quickly and easily, and also meant I could control the transform
(eg. rotation) of the model independently to the controller.

Another challenge was 3D positioning, movement and rotation - since I haven't done
much 3D graphics I struggled to understand what many of the Vector and Quaternion
operations were doing. It doesn't help that many components (CharacterController,
RigidBody, NavMeshAgent) have their own methods to move the object.

Decision: Originally the NPC used asynchronous events instead of a state machine
to do things like paused states, but I decided that having an explicit State.PAUSED
makes things more explicit and easier to work with despite the annoyance of
incrementing and comparing pausedTime manually.

Couldn't get NPC collisions with CharacterController working (tried adding separate
Collider components in various configurations and still couldn't make OnCollisionEnter
detect anything) so had to extend the public interface of the NPC movement components
so that the player movement component could pause them from the outside.
